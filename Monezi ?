//Fiind dată o sumă S şi n monede de valori date, să se determine toate modalitătile de
//plată a sumei S cu aceste monede.Considerăm că sunt monede suficiente din
//fiecare tip.

#include <iostream> 
#include <fstream>


#define MAX 20;

int n = 0, x, v[MAX], w[MAX], z[MAX], S, Suma, sol;

//v-vectorul soluţie,w-valoarea monedelor,z-nr.maxim de monede de un anumit tip


void citire();
int valid(int k);
int solutie();
void afisare(int k);
void BK(int k);


void main()
{
	citire();
	BK(1);
}
void BK(int k)
{
	int i;
	for (i = 0; i <= z[k]; i++)
	{
		v[k] = i;
		if (valid(k) == 1)
		{
			if (solutie() == 1)
				afisare(k);
			else
				BK(k + 1);
		}
	}
}

void citire()
{
	int i;
	ifstream f("in.txt");
	f >> S >> n; //se citeşte suma S şi numărul de monede
	for (i = 1; i <= n; i++)
	{
		f >> w[i]; //se citesc valorile monedelor
		z[i] = S / w[i];
	} //z-memoreză numărul maxim de monede de un anumit tip, penru a plati suma S
	int valid(int k)
	{
		int i;
		Suma = 0;
		for (i = 1; i <= k; i++)
			Suma = Suma + v[i] * w[i];
		if ((Suma <= S) && (k <= n))
			return 1;
		return 0;
	}
	int solutie()
	{
		if (Suma == S)
			return 1;
		return 0;
	}
	void afisare(int k)
	{
		int i;
		sol++; cout << "Solutia :" << sol << endl;
		for (i = 1; i <= k; i++)
			if (v[i]) cout << v[i] << " monede de valoarea " << w[i] << endl;
		cout << endl;
	}
